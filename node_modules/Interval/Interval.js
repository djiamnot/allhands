;(function() {

    var toString = Object.prototype.toString;

    // check if a real function is given
    function isFunction(val) {
        return toString.call(val) === '[object Function]';
    }

    /**
     * single runner
     */
    function Runner() {

        // data holder
        var holder = {};

        /**
         * run a function per milliseconds
         */
        this.run = function run(runFn, time) {
            // call setTimeout instead of setInterval
            setTimeout(function() {

                isFunction(runFn) && runFn();

                // when untilFn() returns true, call endFn and stop the runner
                if (isFunction(holder.untilFn) && holder.untilFn() === true) {
                    isFunction(holder.endFn) && holder.endFn();
                    return;
                }

                // when puaseWhenFn() returns true, pause the runner and call whenPausedFn maybe
                if (isFunction(holder.puaseWhenFn) && holder.puaseWhenFn() === true) {

                    setTimeout(function() {
                        run(runFn, time);
                    }, holder.pauseTime || 10);

                    isFunction(holder.whenPausedFn) && holder.whenPausedFn();

                    return;
                }

                run(runFn, time);

            }, time || 10);

            return this;
        }

        /**
         * pause specified milliseconds when satisfying some conditions
         */
        this.pauseWhen = function(puaseWhenFn, pauseTime) {
            holder.puaseWhenFn = puaseWhenFn;
            holder.pauseTime = pauseTime;
            return this;
        }

        /**
         * call the specified function when paused
         */
        this.whenPaused = function(whenPausedFn) {
            holder.whenPausedFn = whenPausedFn;
            return this;
        }

        /**
         * stop running when untilFn() returns true
         */
        this.until = function(untilFn) {
            holder.untilFn = untilFn;
            return this;
        }

        /**
         * call the handler after runner stopped
         */
        this.end = function(endFn) {
            holder.endFn = endFn;
            return this;
        }
    }

    var Interval = {
        run: function(fn, time) {
            return new Runner().run(fn, time);
        }
    };

    if (typeof window == 'object' && typeof window.document == 'object') {
        window.Interval = Interval;
    } else if (typeof module == 'object' && typeof module.exports == 'object') {
        module.exports = Interval;
    }

})();